// Code generated by MockGen. DO NOT EDIT.
// Source: tracker.go

// Package mock_tracker is a generated GoMock package.
package mock_tracker

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost/server/public/model"
)

// MockTracker is a mock of Tracker interface.
type MockTracker struct {
	ctrl     *gomock.Controller
	recorder *MockTrackerMockRecorder
}

// MockTrackerMockRecorder is the mock recorder for MockTracker.
type MockTrackerMockRecorder struct {
	mock *MockTracker
}

// NewMockTracker creates a new mock instance.
func NewMockTracker(ctrl *gomock.Controller) *MockTracker {
	mock := &MockTracker{ctrl: ctrl}
	mock.recorder = &MockTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracker) EXPECT() *MockTrackerMockRecorder {
	return m.recorder
}

// ReloadConfig mocks base method.
func (m *MockTracker) ReloadConfig(config *model.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReloadConfig", config)
}

// ReloadConfig indicates an expected call of ReloadConfig.
func (mr *MockTrackerMockRecorder) ReloadConfig(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadConfig", reflect.TypeOf((*MockTracker)(nil).ReloadConfig), config)
}

// TrackAutomaticStatusUpdate mocks base method.
func (m *MockTracker) TrackAutomaticStatusUpdate(userID, value, location string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrackAutomaticStatusUpdate", userID, value, location)
}

// TrackAutomaticStatusUpdate indicates an expected call of TrackAutomaticStatusUpdate.
func (mr *MockTrackerMockRecorder) TrackAutomaticStatusUpdate(userID, value, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackAutomaticStatusUpdate", reflect.TypeOf((*MockTracker)(nil).TrackAutomaticStatusUpdate), userID, value, location)
}

// TrackDailySummarySent mocks base method.
func (m *MockTracker) TrackDailySummarySent(userID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrackDailySummarySent", userID)
}

// TrackDailySummarySent indicates an expected call of TrackDailySummarySent.
func (mr *MockTrackerMockRecorder) TrackDailySummarySent(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackDailySummarySent", reflect.TypeOf((*MockTracker)(nil).TrackDailySummarySent), userID)
}

// TrackUserAuthenticated mocks base method.
func (m *MockTracker) TrackUserAuthenticated(userID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrackUserAuthenticated", userID)
}

// TrackUserAuthenticated indicates an expected call of TrackUserAuthenticated.
func (mr *MockTrackerMockRecorder) TrackUserAuthenticated(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackUserAuthenticated", reflect.TypeOf((*MockTracker)(nil).TrackUserAuthenticated), userID)
}

// TrackUserDeauthenticated mocks base method.
func (m *MockTracker) TrackUserDeauthenticated(userID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrackUserDeauthenticated", userID)
}

// TrackUserDeauthenticated indicates an expected call of TrackUserDeauthenticated.
func (mr *MockTrackerMockRecorder) TrackUserDeauthenticated(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackUserDeauthenticated", reflect.TypeOf((*MockTracker)(nil).TrackUserDeauthenticated), userID)
}

// TrackWelcomeFlowCompletion mocks base method.
func (m *MockTracker) TrackWelcomeFlowCompletion(userID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrackWelcomeFlowCompletion", userID)
}

// TrackWelcomeFlowCompletion indicates an expected call of TrackWelcomeFlowCompletion.
func (mr *MockTrackerMockRecorder) TrackWelcomeFlowCompletion(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackWelcomeFlowCompletion", reflect.TypeOf((*MockTracker)(nil).TrackWelcomeFlowCompletion), userID)
}
